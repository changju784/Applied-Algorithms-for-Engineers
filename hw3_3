#ifndef LinkedList_h
#define LinkedList_h

#include <iostream>

using namespace std;

template <class T = int>
class Node {
public:
    Node();                                         // default constructor
    Node(const T& data, Node<T>* next = nullptr);   // donstructor
    T data;                                         // node data
    Node<T>* next;                                  // node next pointer
};

template <class T = int>
class LinkedList {
public:
    LinkedList();                                   // constructor
    ~LinkedList();                                  // destructor
    T deleteFromHead();                             // removes and returns content of head
T deleteFromTail();                              // removes and returns content of tail
void deleteNode(T data);                         // removes node with specified data
    void InsertToHead(T data);                      // insert node with data at the head
    void InsertToTail(T data);                      // insert node with data at the tail
    int getSize();                                  // returns size of linked list
    void print();                                   // prints linked list
private:
    Node<T>* head;                                  // head of linked list
};

template <class T = int>
  class StackFromList {
 public:
 StackFromList();
 ~StackFromList();
 void push(T data);
 T pop();
 bool isEmpty();
 private:
 Node<T>* bottom;
};

template <class T = int>
  class QueueFromList {
 public:
 QueueFromList();
 ~QueueFromList();
 void enqueue(T data);
 T dequeue();
 bool isEmpty();
 private:
 Node<T>* first;
};

/******* From here down is the content of the LinkedList.cpp file: ***********************/

 /* Implementation of Node */

 // default constructor
 template<class T>
 Node<T>::Node()
 {
 }
 
 // constructor
 template<class T>
 Node<T>::Node(const T& data, Node<T>* next)
 {
     this->data = data;
     this->next = next;
 }
 
 /* Implementation of linked list */

 // constructor
 template <class T>
 LinkedList<T>::LinkedList()
 {
     head = nullptr;
 }

 // destructor
 template <class T>
 LinkedList<T>::~LinkedList()
 {
   while(head != nullptr){
     Node<T> *iter = head;
     head = head -> next;
     delete(iter);
   }
 }

 template <class T>
 T LinkedList<T>::deleteFromHead()
 {
   Node<T> *temp = head;
   if (head -> next == nullptr){
     T data = head -> data;
     head = nullptr;
     return data;
   }
     else{
   head = head -> next;
     T data = temp -> data;
     delete temp;
     return data;
   }
 }


 template <class T>
 T LinkedList<T>::deleteFromTail()
 {
   Node<T> *temp = head;
   if (head -> next == nullptr){
     T data = head -> data;
     head = nullptr;
     return data;
   }
   else{
     while (temp -> next -> next != nullptr){
       temp = temp -> next;
     }
     T data = temp -> next ->  data;
     delete (temp -> next);
     temp -> next = nullptr;
     return data;
   }
 }
 

 template <class T>
 void LinkedList<T>::deleteNode(T data)
 {
   Node <T>* temp = head;
   Node <T>* prev;
   if (head -> data == data)
     head = head -> next;
   while (temp -> next != nullptr){
     if (temp -> next -> data == data){
       prev = temp -> next -> next;
       delete temp -> next;
       temp -> next = prev;  
	 }
     else
     temp = temp -> next;
   }
 }
 

 template <class T>
 void LinkedList<T>::InsertToHead(T data)
 {
     Node<T> * newNode = new Node<T>(data, nullptr);
     
     if (head == nullptr)
         head = newNode;
     else
     {
         newNode->next = head;
         head = newNode;
     }
 }


 template <class T>
 void LinkedList<T>::InsertToTail(T data)
 {
    Node<T>* newNode = new Node<T>(data, nullptr);
    Node<T>* temp = head; 

    if (temp == nullptr)
      head = newNode;
    else
      {
	while(temp -> next != nullptr)
	  temp = temp -> next;
	temp->next = newNode; 
      }
 }


 template <class T>
 int LinkedList<T>::getSize()
 {
   int size = 0;
   Node<T>* temp = head;
   if (temp == nullptr)
     return size;
   else{
     while (temp -> next != nullptr){
       temp = temp -> next;
       size++;
     }
     size++;
     return size;
   }
 }


 template <class T>
 void LinkedList<T>::print()
 {
     if (head == nullptr)
     {
         cout << "Linked list is empty" << endl;;
         return;
     }
     
     cout << head->data << " ";
     
     if (head->next == nullptr)
     {
         cout << endl;
         return;
     }
 
     Node<T>* currNode = head->next;
     Node<T>* prevNode = head;
 
     
     while (currNode->next != nullptr)
     {
         cout << currNode->data << " ";
         prevNode = currNode;
         currNode = currNode->next;
     }
 
     cout << currNode->data << endl;
     return;
 }

      /* Implementation of StackFromList*/
template <class T>
StackFromList<T>::StackFromList(){
  bottom = nullptr;
    }

template <class T>
StackFromList<T>::~StackFromList(){
   while(bottom != nullptr){
     Node<T> *iter = bottom;
     bottom = bottom -> next;
     delete(iter);
   }
 }
 
template <class T>
void StackFromList<T>::push(T data){
  Node<T>* newNode = new Node<T>(data, nullptr);
    Node<T>* temp = bottom; 

    if (bottom == nullptr)
      bottom = newNode;
    else
      {
	while(temp -> next != nullptr)
	  temp = temp -> next;
	temp->next = newNode; 
      }
}

template <class T>
T StackFromList<T>::pop(){
   Node<T> *temp = bottom;
   if (bottom -> next == nullptr){
     T data = bottom -> data;
     bottom = nullptr;
     return data;
   }
   else{
     while (temp -> next -> next != nullptr){
       temp = temp -> next;
     }
     T data = temp -> next ->  data;
     delete (temp -> next);
     temp -> next = nullptr;
     return data;
   }
}

template <class T>
bool StackFromList<T>::isEmpty(){
  if (bottom == nullptr)
    return true;
  else
    return false;
}
/*Implementation of QueueFromList */
template <class T>
QueueFromList<T>::QueueFromList(){
  first = nullptr;
}

template <class T>
QueueFromList<T>::~QueueFromList(){
   while(first != nullptr){
     Node<T> *iter = first;
     first = first -> next;
     delete(iter);
   }
}

template <class T>
void QueueFromList<T>::enqueue(T data){
       Node<T> * newNode = new Node<T>(data, nullptr);
     
     if (first == nullptr)
         first = newNode;
     else
     {
         newNode->next = first;
         first = newNode;
     }
}

template <class T>
T QueueFromList<T>::dequeue(){
    Node<T> *temp = first;
   if (first -> next == nullptr){
     T data = first -> data;
     first = nullptr;
     return data;
   }
   else{
     while (temp -> next -> next != nullptr){
       temp = temp -> next;
     }
     T data = temp -> next ->  data;
     delete (temp -> next);
     temp -> next = nullptr;
     return data;
   }
}
template <class T>
bool QueueFromList<T>::isEmpty(){
  if (first == nullptr)
    return true;
  else
    return false;
}


#endif /* LinkedList_h */
